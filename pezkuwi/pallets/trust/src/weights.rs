//! Autogenerated weights for pallet_trust
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-05-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HEAVY ACCOUNT WORST CASE EXECUTION TIME: 180 ms
//! DBMS WEIGHT USED: ROCKSDB
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_trust
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_trust.
pub trait WeightInfo {
    fn recalculate_and_store_trust_score() -> Weight;
    // counter_count parametresi eklendi
    fn reset_activity_counters(counter_count: u32) -> Weight;
    fn force_apply_penalty() -> Weight;
    fn record_activity_for_user() -> Weight;
}

/// Weights for pallet_trust using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn recalculate_and_store_trust_score() -> Weight {
        // Okuma/yazma sayıları lib.rs'deki gerçek işlemlere göre güncellendi
        Weight::from_parts(180_000_000u64, 0)
            .saturating_add(T::DbWeight::get().reads(5_u64)) // 5 ham skor okuması
            .saturating_add(T::DbWeight::get().writes(1_u64)) // FinalTrustScores yazması
    }

    fn reset_activity_counters(c: u32) -> Weight {
        Weight::from_parts(20_000_000u64, 0)
            // c: AccountActivityCounters'dan silinen öğe sayısı
            .saturating_add(Weight::from_parts(5_000_000u64, 0).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1_u64)) // ScheduledResetTask okuması
            .saturating_add(T::DbWeight::get().writes(c.saturating_add(1) as u64)) // c sayaç + ScheduledResetTask yazması
    }

    fn force_apply_penalty() -> Weight {
        Weight::from_parts(50_000_000u64, 0)
            .saturating_add(T::DbWeight::get().reads(1_u64))  // FinalTrustScores okuması
            .saturating_add(T::DbWeight::get().writes(1_u64)) // FinalTrustScores yazması
    }

    fn record_activity_for_user() -> Weight {
        Weight::from_parts(20_000_000u64, 0)
            .saturating_add(T::DbWeight::get().reads(1_u64))  // AccountActivityCounters okuması (mutate için)
            .saturating_add(T::DbWeight::get().writes(1_u64)) // AccountActivityCounters yazması
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn recalculate_and_store_trust_score() -> Weight {
        Weight::from_parts(180_000_000u64, 0)
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn reset_activity_counters(c: u32) -> Weight {
        Weight::from_parts(20_000_000u64, 0)
            .saturating_add(Weight::from_parts(5_000_000u64, 0).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(c.saturating_add(1) as u64))
    }
    fn force_apply_penalty() -> Weight {
        Weight::from_parts(50_000_000u64, 0)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn record_activity_for_user() -> Weight {
        Weight::from_parts(20_000_000u64, 0)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}