// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_trust`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-07-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `mamoste`, CPU: `Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// target/release/pezkuwi
// benchmark
// pallet
// --pallet
// pallet_trust
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// pezkuwi/pallets/trust/src/weights.rs
// --template
// substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_trust`.
pub trait WeightInfo {
	fn force_recalculate_trust_score() -> Weight;
	fn update_all_trust_scores() -> Weight;
	fn periodic_trust_score_update() -> Weight;
}

/// Weights for `pallet_trust` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Trust::TrustScores` (r:1 w:1)
	/// Proof: `Trust::TrustScores` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `IdentityKyc::KycStatuses` (r:1 w:0)
	/// Proof: `IdentityKyc::KycStatuses` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `StakingScore::StakingStartBlock` (r:1 w:0)
	/// Proof: `StakingScore::StakingStartBlock` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Referral::ReferralCount` (r:1 w:0)
	/// Proof: `Referral::ReferralCount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Perwerde::StudentCourses` (r:1 w:0)
	/// Proof: `Perwerde::StudentCourses` (`max_values`: None, `max_size`: Some(4050), added: 6525, mode: `MaxEncodedLen`)
	/// Storage: `Tiki::AccountToTiki` (r:1 w:0)
	/// Proof: `Tiki::AccountToTiki` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `Trust::TotalActiveTrustScore` (r:1 w:1)
	/// Proof: `Trust::TotalActiveTrustScore` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn force_recalculate_trust_score() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `655`
		//  Estimated: `7515`
		// Minimum execution time: 74_100_000 picoseconds.
		Weight::from_parts(82_000_000, 7515)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::LastProcessedAccount` (r:1 w:1)
	/// Proof: `Trust::LastProcessedAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Trust::BatchUpdateInProgress` (r:0 w:1)
	/// Proof: `Trust::BatchUpdateInProgress` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn update_all_trust_scores() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237`
		//  Estimated: `1517`
		// Minimum execution time: 24_600_000 picoseconds.
		Weight::from_parts(26_300_000, 1517)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::BatchUpdateInProgress` (r:1 w:1)
	/// Proof: `Trust::BatchUpdateInProgress` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Trust::LastProcessedAccount` (r:1 w:1)
	/// Proof: `Trust::LastProcessedAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn periodic_trust_score_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237`
		//  Estimated: `1517`
		// Minimum execution time: 35_600_000 picoseconds.
		Weight::from_parts(41_200_000, 1517)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Trust::TrustScores` (r:1 w:1)
	/// Proof: `Trust::TrustScores` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `IdentityKyc::KycStatuses` (r:1 w:0)
	/// Proof: `IdentityKyc::KycStatuses` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `StakingScore::StakingStartBlock` (r:1 w:0)
	/// Proof: `StakingScore::StakingStartBlock` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Referral::ReferralCount` (r:1 w:0)
	/// Proof: `Referral::ReferralCount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `Perwerde::StudentCourses` (r:1 w:0)
	/// Proof: `Perwerde::StudentCourses` (`max_values`: None, `max_size`: Some(4050), added: 6525, mode: `MaxEncodedLen`)
	/// Storage: `Tiki::AccountToTiki` (r:1 w:0)
	/// Proof: `Tiki::AccountToTiki` (`max_values`: None, `max_size`: Some(150), added: 2625, mode: `MaxEncodedLen`)
	/// Storage: `Trust::TotalActiveTrustScore` (r:1 w:1)
	/// Proof: `Trust::TotalActiveTrustScore` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn force_recalculate_trust_score() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `655`
		//  Estimated: `7515`
		// Minimum execution time: 74_100_000 picoseconds.
		Weight::from_parts(82_000_000, 7515)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::LastProcessedAccount` (r:1 w:1)
	/// Proof: `Trust::LastProcessedAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Trust::BatchUpdateInProgress` (r:0 w:1)
	/// Proof: `Trust::BatchUpdateInProgress` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn update_all_trust_scores() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237`
		//  Estimated: `1517`
		// Minimum execution time: 24_600_000 picoseconds.
		Weight::from_parts(26_300_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Trust::BatchUpdateInProgress` (r:1 w:1)
	/// Proof: `Trust::BatchUpdateInProgress` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Trust::LastProcessedAccount` (r:1 w:1)
	/// Proof: `Trust::LastProcessedAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn periodic_trust_score_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237`
		//  Estimated: `1517`
		// Minimum execution time: 35_600_000 picoseconds.
		Weight::from_parts(41_200_000, 1517)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
