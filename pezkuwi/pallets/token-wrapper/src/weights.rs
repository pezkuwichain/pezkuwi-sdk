//! Autogenerated weights for `pallet_token_wrapper`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2025-10-30
//!
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/pezkuwi
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_token_wrapper
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=./pezkuwi/pallets/token-wrapper/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_token_wrapper`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for SubstrateWeight<T> {
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `TokenWrapper::TotalLocked` (r:1 w:1)
    /// Proof: `TokenWrapper::TotalLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
    fn wrap() -> Weight {
        Weight::from_parts(68_860_000, 865)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }

    /// Storage: `Assets::Account` (r:1 w:1)
    /// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
    /// Storage: `Assets::Asset` (r:1 w:1)
    /// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
    /// Storage: `TokenWrapper::TotalLocked` (r:1 w:1)
    /// Proof: `TokenWrapper::TotalLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    fn unwrap() -> Weight {
        Weight::from_parts(81_480_000, 942)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
}

// For backwards compatibility and tests.
impl crate::WeightInfo for () {
    fn wrap() -> Weight {
        Weight::from_parts(68_860_000, 865)
            .saturating_add(frame_support::weights::constants::RocksDbWeight::get().reads(4_u64))
            .saturating_add(frame_support::weights::constants::RocksDbWeight::get().writes(4_u64))
    }

    fn unwrap() -> Weight {
        Weight::from_parts(81_480_000, 942)
            .saturating_add(frame_support::weights::constants::RocksDbWeight::get().reads(4_u64))
            .saturating_add(frame_support::weights::constants::RocksDbWeight::get().writes(4_u64))
    }
}