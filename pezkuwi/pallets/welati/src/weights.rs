//! Autogenerated weights for `pallet_welati`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-08-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `mamoste`, CPU: `Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// target/release/pezkuwi
// benchmark
// pallet
// --chain=dev
// --pallet=pallet_welati
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=./pezkuwi/pallets/welati/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_welati`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: `Welati::NextElectionId` (r:1 w:1)
	/// Proof: `Welati::NextElectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Welati::ActiveElections` (r:0 w:1)
	/// Proof: `Welati::ActiveElections` (`max_values`: None, `max_size`: Some(29354), added: 31829, mode: `MaxEncodedLen`)
	fn initiate_election() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1489`
		// Minimum execution time: 20_700_000 picoseconds.
		Weight::from_parts(21_300_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Welati::ActiveElections` (r:1 w:1)
	/// Proof: `Welati::ActiveElections` (`max_values`: None, `max_size`: Some(29354), added: 31829, mode: `MaxEncodedLen`)
	/// Storage: `Welati::ElectionCandidates` (r:1 w:1)
	/// Proof: `Welati::ElectionCandidates` (`max_values`: None, `max_size`: Some(3833), added: 6308, mode: `MaxEncodedLen`)
	fn register_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `32819`
		// Minimum execution time: 33_900_000 picoseconds.
		Weight::from_parts(34_900_000, 0)
			.saturating_add(Weight::from_parts(0, 32819))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Welati::ActiveElections` (r:1 w:1)
	/// Proof: `Welati::ActiveElections` (`max_values`: None, `max_size`: Some(29354), added: 31829, mode: `MaxEncodedLen`)
	/// Storage: `Welati::ElectionVotes` (r:1 w:1)
	/// Proof: `Welati::ElectionVotes` (`max_values`: None, `max_size`: Some(435), added: 2910, mode: `MaxEncodedLen`)
	/// Storage: `Welati::ElectionCandidates` (r:1 w:1)
	/// Proof: `Welati::ElectionCandidates` (`max_values`: None, `max_size`: Some(3833), added: 6308, mode: `MaxEncodedLen`)
	fn cast_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1998`
		//  Estimated: `32819`
		// Minimum execution time: 46_600_000 picoseconds.
		Weight::from_parts(47_200_000, 0)
			.saturating_add(Weight::from_parts(0, 32819))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Welati::ActiveElections` (r:1 w:1)
	/// Proof: `Welati::ActiveElections` (`max_values`: None, `max_size`: Some(29354), added: 31829, mode: `MaxEncodedLen`)
	/// Storage: `Welati::ElectionCandidates` (r:1 w:0)
	/// Proof: `Welati::ElectionCandidates` (`max_values`: None, `max_size`: Some(3833), added: 6308, mode: `MaxEncodedLen`)
	/// Storage: `Welati::ElectionResults` (r:0 w:1)
	/// Proof: `Welati::ElectionResults` (`max_values`: None, `max_size`: Some(6467), added: 8942, mode: `MaxEncodedLen`)
	/// Storage: `Welati::ParliamentMembers` (r:0 w:1)
	/// Proof: `Welati::ParliamentMembers` (`max_values`: Some(1), `max_size`: Some(11057), added: 11552, mode: `MaxEncodedLen`)
	fn finalize_election() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2031`
		//  Estimated: `32819`
		// Minimum execution time: 44_800_000 picoseconds.
		Weight::from_parts(45_900_000, 0)
			.saturating_add(Weight::from_parts(0, 32819))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Welati::NextAppointmentId` (r:1 w:1)
	/// Proof: `Welati::NextAppointmentId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn nominate_official() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1489`
		// Minimum execution time: 9_700_000 picoseconds.
		Weight::from_parts(10_100_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn approve_appointment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_600_000 picoseconds.
		Weight::from_parts(4_800_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Welati::ParliamentMembers` (r:1 w:0)
	/// Proof: `Welati::ParliamentMembers` (`max_values`: Some(1), `max_size`: Some(11057), added: 11552, mode: `MaxEncodedLen`)
	/// Storage: `Welati::CurrentOfficials` (r:1 w:0)
	/// Proof: `Welati::CurrentOfficials` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `Welati::NextProposalId` (r:1 w:1)
	/// Proof: `Welati::NextProposalId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Welati::ActiveProposals` (r:0 w:1)
	/// Proof: `Welati::ActiveProposals` (`max_values`: None, `max_size`: Some(1195), added: 3670, mode: `MaxEncodedLen`)
	fn submit_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `186`
		//  Estimated: `12542`
		// Minimum execution time: 26_100_000 picoseconds.
		Weight::from_parts(26_800_000, 0)
			.saturating_add(Weight::from_parts(0, 12542))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Welati::ActiveProposals` (r:1 w:1)
	/// Proof: `Welati::ActiveProposals` (`max_values`: None, `max_size`: Some(1195), added: 3670, mode: `MaxEncodedLen`)
	/// Storage: `Welati::CollectiveVotes` (r:0 w:1)
	/// Proof: `Welati::CollectiveVotes` (`max_values`: None, `max_size`: Some(612), added: 3087, mode: `MaxEncodedLen`)
	fn vote_on_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `325`
		//  Estimated: `4660`
		// Minimum execution time: 23_800_000 picoseconds.
		Weight::from_parts(33_500_000, 0)
			.saturating_add(Weight::from_parts(0, 4660))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}