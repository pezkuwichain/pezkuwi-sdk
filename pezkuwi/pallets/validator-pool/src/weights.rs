//! Autogenerated weights for `pallet_validator_pool`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-08-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `pezkuwichain-benchmarking`, CPU: `Intel(R) Core(TM) i7-8700K`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("pezkuwichain-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/pezkuwi
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_validator_pool
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=../pezkuwi/pallets/validator-pool/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions trait for pallet_validator_pool.
pub trait WeightInfo {
    fn join_validator_pool() -> Weight;
    fn leave_validator_pool() -> Weight;
    fn update_performance_metrics() -> Weight;
    fn force_new_era() -> Weight;
    fn update_category() -> Weight;
    fn set_pool_parameters() -> Weight;
}

/// Weights for pallet_validator_pool using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: ValidatorPool PoolMembers (r:1 w:1)
    /// Proof: ValidatorPool PoolMembers (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
    /// Storage: ValidatorPool PoolSize (r:1 w:1)
    /// Proof: ValidatorPool PoolSize (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: ValidatorPool CurrentEra (r:1 w:0)
    /// Proof: ValidatorPool CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: ValidatorPool PerformanceMetrics (r:0 w:1)
    /// Proof: ValidatorPool PerformanceMetrics (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
    fn join_validator_pool() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `150`
        //  Estimated: `3546`
        // Minimum execution time: 34_800_000 picoseconds.
        Weight::from_parts(34_800_000, 3546)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }

    /// Storage: ValidatorPool PoolMembers (r:1 w:1)
    /// Proof: ValidatorPool PoolMembers (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
    /// Storage: ValidatorPool PoolSize (r:1 w:1)
    /// Proof: ValidatorPool PoolSize (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: ValidatorPool PerformanceMetrics (r:0 w:1)
    /// Proof: ValidatorPool PerformanceMetrics (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
    /// Storage: ValidatorPool SelectionHistory (r:0 w:1)
    /// Proof: ValidatorPool SelectionHistory (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
    fn leave_validator_pool() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `200`
        //  Estimated: `3546`
        // Minimum execution time: 39_000_000 picoseconds.
        Weight::from_parts(39_000_000, 3546)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }

    /// Storage: ValidatorPool PerformanceMetrics (r:1 w:1)
    /// Proof: ValidatorPool PerformanceMetrics (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
    /// Storage: ValidatorPool CurrentEra (r:1 w:0)
    /// Proof: ValidatorPool CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn update_performance_metrics() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `120`
        //  Estimated: `3530`
        // Minimum execution time: 28_300_000 picoseconds.
        Weight::from_parts(28_300_000, 3530)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    /// Storage: ValidatorPool CurrentEra (r:1 w:1)
    /// Proof: ValidatorPool CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Babe NextRandomness (r:1 w:0)
    /// Proof: Babe NextRandomness (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: Babe EpochStart (r:1 w:0)
    /// Proof: Babe EpochStart (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: ValidatorPool PoolMembers (r:101 w:0)
    /// Proof: ValidatorPool PoolMembers (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
    /// Storage: ValidatorPool SelectionHistory (r:100 w:21)
    /// Proof: ValidatorPool SelectionHistory (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
    /// Storage: ValidatorPool PerformanceMetrics (r:100 w:0)
    /// Proof: ValidatorPool PerformanceMetrics (max_values: None, max_size: Some(65), added: 2540, mode: MaxEncodedLen)
    /// Storage: ValidatorPool CurrentValidatorSet (r:0 w:1)
    /// Proof: ValidatorPool CurrentValidatorSet (max_values: Some(1), max_size: Some(679), added: 1174, mode: MaxEncodedLen)
    /// Storage: ValidatorPool EraStart (r:0 w:1)
    /// Proof: ValidatorPool EraStart (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn force_new_era() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `150`
        //  Estimated: `3546`
        // Minimum execution time: 151_100_000 picoseconds.
        Weight::from_parts(151_100_000, 3546)
            .saturating_add(T::DbWeight::get().reads(203_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }

    /// Storage: ValidatorPool PoolMembers (r:1 w:1)
    /// Proof: ValidatorPool PoolMembers (max_values: None, max_size: Some(81), added: 2556, mode: MaxEncodedLen)
    fn update_category() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `200`
        //  Estimated: `3546`
        // Minimum execution time: 25_900_000 picoseconds.
        Weight::from_parts(25_900_000, 3546)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    /// Storage: ValidatorPool EraLength (r:0 w:1)
    /// Proof: ValidatorPool EraLength (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn set_pool_parameters() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_700_000 picoseconds.
        Weight::from_parts(11_700_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn join_validator_pool() -> Weight {
        Weight::from_parts(34_800_000, 3546)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }

    fn leave_validator_pool() -> Weight {
        Weight::from_parts(39_000_000, 3546)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }

    fn update_performance_metrics() -> Weight {
        Weight::from_parts(28_300_000, 3530)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    fn force_new_era() -> Weight {
        Weight::from_parts(151_100_000, 3546)
            .saturating_add(RocksDbWeight::get().reads(203_u64))
            .saturating_add(RocksDbWeight::get().writes(24_u64))
    }

    fn update_category() -> Weight {
        Weight::from_parts(25_900_000, 3546)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }

    fn set_pool_parameters() -> Weight {
        Weight::from_parts(11_700_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}

// Implementation for crate::WeightInfo trait  
impl<T: frame_system::Config> crate::WeightInfo for SubstrateWeight<T> {
    fn join_validator_pool() -> Weight {
        Weight::from_parts(34_800_000, 3546)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }

    fn leave_validator_pool() -> Weight {
        Weight::from_parts(39_000_000, 3546)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }

    fn update_performance_metrics() -> Weight {
        Weight::from_parts(28_300_000, 3530)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    fn force_new_era() -> Weight {
        Weight::from_parts(151_100_000, 3546)
            .saturating_add(T::DbWeight::get().reads(203_u64))
            .saturating_add(T::DbWeight::get().writes(24_u64))
    }

    fn update_category() -> Weight {
        Weight::from_parts(25_900_000, 3546)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    fn set_pool_parameters() -> Weight {
        Weight::from_parts(11_700_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}