// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_pez_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-07-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `mamoste`, CPU: `Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// target/release/pezkuwi
// benchmark
// pallet
// --pallet
// pallet_pez_rewards
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --wasm-execution=compiled
// --heap-pages=4096
// --output
// pezkuwi/pallets/pez-rewards/src/weights.rs
// --template
// substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_pez_rewards`.
pub trait WeightInfo {
	fn initialize_rewards_system() -> Weight;
	fn record_trust_score() -> Weight;
	fn finalize_epoch() -> Weight;
	fn claim_reward() -> Weight;
	fn close_epoch() -> Weight;
}

/// Weights for `pallet_pez_rewards` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PezRewards::EpochStatus` (r:0 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochInfo` (r:0 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn initialize_rewards_system() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 22_800_000 picoseconds.
		Weight::from_parts(34_500_000, 0)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PezRewards::EpochInfo` (r:1 w:0)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `Trust::TrustScores` (r:1 w:0)
	/// Proof: `Trust::TrustScores` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn record_trust_score() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `333`
		//  Estimated: `3529`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(36_100_000, 3529)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `PezRewards::EpochInfo` (r:1 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:3 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:0 w:2)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:0 w:1)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn finalize_epoch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `8667`
		// Minimum execution time: 88_700_000 picoseconds.
		Weight::from_parts(139_900_000, 8667)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::ClaimedRewards` (r:1 w:1)
	/// Proof: `PezRewards::ClaimedRewards` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:1 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `846`
		//  Estimated: `6196`
		// Minimum execution time: 137_900_000 picoseconds.
		Weight::from_parts(155_100_000, 6196)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `PezRewards::EpochStatus` (r:1 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn close_epoch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `3593`
		// Minimum execution time: 63_500_000 picoseconds.
		Weight::from_parts(74_300_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `PezRewards::EpochStatus` (r:0 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochInfo` (r:0 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn initialize_rewards_system() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 22_800_000 picoseconds.
		Weight::from_parts(34_500_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PezRewards::EpochInfo` (r:1 w:0)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `Trust::TrustScores` (r:1 w:0)
	/// Proof: `Trust::TrustScores` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn record_trust_score() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `333`
		//  Estimated: `3529`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(36_100_000, 3529)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `PezRewards::EpochInfo` (r:1 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:3 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:0 w:2)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:0 w:1)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn finalize_epoch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `8667`
		// Minimum execution time: 88_700_000 picoseconds.
		Weight::from_parts(139_900_000, 8667)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::ClaimedRewards` (r:1 w:1)
	/// Proof: `PezRewards::ClaimedRewards` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:1 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `846`
		//  Estimated: `6196`
		// Minimum execution time: 137_900_000 picoseconds.
		Weight::from_parts(155_100_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `PezRewards::EpochStatus` (r:1 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn close_epoch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `3593`
		// Minimum execution time: 63_500_000 picoseconds.
		Weight::from_parts(74_300_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
