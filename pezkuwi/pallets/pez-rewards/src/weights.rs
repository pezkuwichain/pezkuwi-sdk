//! Autogenerated weights for `pallet_pez_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI
//! DATE: 2025-08-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `mamoste`, CPU: `Intel(R) Core(TM) i7-8665U CPU @ 1.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_pez_rewards`.
pub struct WeightInfo<T>(PhantomData<T>);

// DOĞRU TRAIT REFERANSI - DEĞIŞTIRILMEZ!
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: `PezRewards::EpochStatus` (r:0 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochInfo` (r:0 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn initialize_rewards_system() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_800_000 picoseconds.
		Weight::from_parts(20_800_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(2))
	}

	/// Storage: `PezRewards::EpochInfo` (r:1 w:0)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `Trust::TrustScores` (r:1 w:0)
	/// Proof: `Trust::TrustScores` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn record_trust_score() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `333`
		//  Estimated: `3529`
		// Minimum execution time: 29_900_000 picoseconds.
		Weight::from_parts(29_900_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(T::DbWeight::get().reads(3))
	}

	/// Storage: `PezRewards::EpochInfo` (r:1 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:3 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:0 w:2)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:0 w:1)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn finalize_epoch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `8667`
		// Minimum execution time: 1_015_000_000 picoseconds.
		Weight::from_parts(1_015_000_000, 0)
			.saturating_add(Weight::from_parts(0, 8667))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}

	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::ClaimedRewards` (r:1 w:1)
	/// Proof: `PezRewards::ClaimedRewards` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:1 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn claim_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1014`
		//  Estimated: `6196`
		// Minimum execution time: 150_700_000 picoseconds.
		Weight::from_parts(150_700_000, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}

	/// Storage: `PezRewards::EpochStatus` (r:1 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn close_epoch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `434`
		//  Estimated: `3593`
		// Minimum execution time: 47_100_000 picoseconds.
		Weight::from_parts(47_100_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}

	/// Storage: `PezRewards::ParliamentaryNftOwners` (r:0 w:1)
	/// Proof: `PezRewards::ParliamentaryNftOwners` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn register_parliamentary_nft_owner() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}