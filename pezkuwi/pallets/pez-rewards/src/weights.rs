// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_pez_rewards`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-10-20, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-EET1D9O`, CPU: `11th Gen Intel(R) Core(TM) i9-11950H @ 2.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command: (Turn 56)
// ./target/release/pezkuwi
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_pez_rewards
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pezkuwi/pallets/pez-rewards/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)] // Added to prevent warnings for unused functions in () impl

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_pez_rewards`. (Yapı Turn 62'den alındı)
pub trait WeightInfo {
	fn initialize_rewards_system() -> Weight;
	fn record_trust_score() -> Weight;
	fn finalize_epoch() -> Weight;
	fn claim_reward() -> Weight;
	fn close_epoch() -> Weight;
	fn register_parliamentary_nft_owner() -> Weight;
}

/// Weights for `pallet_pez_rewards` using the Substrate node and recommended hardware. (Yapı Turn 62'den alındı)
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PezRewards::EpochInfo` (r:1 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:0 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	fn initialize_rewards_system() -> Weight { // Değerler Turn 56'dan
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `1502`
		// Minimum execution time: 10_987_000 picoseconds.
		Weight::from_parts(11_508_000, 0)
			.saturating_add(Weight::from_parts(0, 1502))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `PezRewards::EpochInfo` (r:1 w:0)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `Trust::TrustScores` (r:1 w:0)
	/// Proof: `Trust::TrustScores` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:0 w:1)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn record_trust_score() -> Weight { // Değerler Turn 56'dan
		// Proof Size summary in bytes:
		//  Measured:  `333`
		//  Estimated: `3529`
		// Minimum execution time: 16_978_000 picoseconds.
		Weight::from_parts(17_591_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `PezRewards::EpochInfo` (r:1 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:1 w:2)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:0)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::ParliamentaryNftOwners` (r:201 w:0)
	/// Proof: `PezRewards::ParliamentaryNftOwners` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:1 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:0 w:1)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn finalize_epoch() -> Weight { // Değerler Turn 56'dan
		// Proof Size summary in bytes:
		//  Measured:  `745`
		//  Estimated: `507927`
		// Minimum execution time: 358_540_000 picoseconds.
		Weight::from_parts(363_038_000, 0)
			.saturating_add(Weight::from_parts(0, 507927))
			.saturating_add(T::DbWeight::get().reads(205))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::ClaimedRewards` (r:1 w:1)
	/// Proof: `PezRewards::ClaimedRewards` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:1 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn claim_reward() -> Weight { // Değerler Turn 56'dan
		// Proof Size summary in bytes:
		//  Measured:  `1123`
		//  Estimated: `6208`
		// Minimum execution time: 62_987_000 picoseconds.
		Weight::from_parts(64_262_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `PezRewards::EpochStatus` (r:1 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn close_epoch() -> Weight { // Değerler Turn 56'dan
		// Proof Size summary in bytes:
		//  Measured:  `1119`
		//  Estimated: `6208`
		// Minimum execution time: 65_685_000 picoseconds.
		Weight::from_parts(67_892_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `PezRewards::ParliamentaryNftOwners` (r:0 w:1)
	/// Proof: `PezRewards::ParliamentaryNftOwners` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn register_parliamentary_nft_owner() -> Weight { // Değerler Turn 56'dan
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_237_000 picoseconds.
		Weight::from_parts(7_592_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests. (Yapı Turn 62'den alındı)
impl WeightInfo for () {
	/// Storage: `PezRewards::EpochStatus` (r:0 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochInfo` (r:0 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	fn initialize_rewards_system() -> Weight { // Değerler Turn 56'dan (RocksDbWeight ile)
		// Proof Size summary in bytes:
		//  Measured:  `213`
		//  Estimated: `1502`
		// Minimum execution time: 10_987_000 picoseconds.
		Weight::from_parts(11_508_000, 0)
			.saturating_add(Weight::from_parts(0, 1502))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `PezRewards::EpochInfo` (r:1 w:0)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `Trust::TrustScores` (r:1 w:0)
	/// Proof: `Trust::TrustScores` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:0 w:1)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	fn record_trust_score() -> Weight { // Değerler Turn 56'dan (RocksDbWeight ile)
		// Proof Size summary in bytes:
		//  Measured:  `333`
		//  Estimated: `3529`
		// Minimum execution time: 16_978_000 picoseconds.
		Weight::from_parts(17_591_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `PezRewards::EpochInfo` (r:1 w:1)
	/// Proof: `PezRewards::EpochInfo` (`max_values`: Some(1), `max_size`: Some(12), added: 507, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochStatus` (r:1 w:2)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:1 w:0)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::ParliamentaryNftOwners` (r:201 w:0)
	/// Proof: `PezRewards::ParliamentaryNftOwners` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:1 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:0 w:1)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn finalize_epoch() -> Weight { // Değerler Turn 56'dan (RocksDbWeight ile)
		// Proof Size summary in bytes:
		//  Measured:  `745`
		//  Estimated: `507927`
		// Minimum execution time: 358_540_000 picoseconds.
		Weight::from_parts(363_038_000, 0)
			.saturating_add(Weight::from_parts(0, 507927))
			.saturating_add(RocksDbWeight::get().reads(205))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: `PezRewards::EpochStatus` (r:1 w:0)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::ClaimedRewards` (r:1 w:1)
	/// Proof: `PezRewards::ClaimedRewards` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::UserEpochScores` (r:1 w:0)
	/// Proof: `PezRewards::UserEpochScores` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	fn claim_reward() -> Weight { // Değerler Turn 56'dan (RocksDbWeight ile)
		// Proof Size summary in bytes:
		//  Measured:  `1123`
		//  Estimated: `6208`
		// Minimum execution time: 62_987_000 picoseconds.
		Weight::from_parts(64_262_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: `PezRewards::EpochStatus` (r:1 w:1)
	/// Proof: `PezRewards::EpochStatus` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `PezRewards::EpochRewardPools` (r:1 w:0)
	/// Proof: `PezRewards::EpochRewardPools` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Account` (r:2 w:2)
	/// Proof: `Assets::Account` (`max_values`: None, `max_size`: Some(134), added: 2609, mode: `MaxEncodedLen`)
	/// Storage: `Assets::Asset` (r:1 w:1)
	/// Proof: `Assets::Asset` (`max_values`: None, `max_size`: Some(210), added: 2685, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn close_epoch() -> Weight { // Değerler Turn 56'dan (RocksDbWeight ile)
		// Proof Size summary in bytes:
		//  Measured:  `1119`
		//  Estimated: `6208`
		// Minimum execution time: 65_685_000 picoseconds.
		Weight::from_parts(67_892_000, 0)
			.saturating_add(Weight::from_parts(0, 6208))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	/// Storage: `PezRewards::ParliamentaryNftOwners` (r:0 w:1)
	/// Proof: `PezRewards::ParliamentaryNftOwners` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn register_parliamentary_nft_owner() -> Weight { // Değerler Turn 56'dan (RocksDbWeight ile)
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_237_000 picoseconds.
		Weight::from_parts(7_592_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
